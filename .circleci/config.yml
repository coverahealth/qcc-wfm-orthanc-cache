version: 2.1

orbs:
  python: circleci/python@2.1.0
  py-project-setup: coverahealth/py-project-config@1.0
  sonarcloud: sonarsource/sonarcloud@2.0
  docker: circleci/docker@2.4
  jira: circleci/jira@2.1.0
commands:
  run-pytest:
    steps:
      - run:
          name: Run pytest with coverage
          command: poetry run pytest --cov-report xml --cov=src --cov-fail-under=$CODE_COVERAGE_TARGET_PERCENTAGE --no-cov-on-fail
  build-wheel:
    steps:
      - run:
          name: Build python wheel
          command: poetry build -f wheel
  set-build-timestamp:
    steps:
      - run:
          name: Capture build timestamp tag
          command: |
            echo 'export BUILD_TS_TAG=1.0.0-'$(date -u +%Y%m%d%H%M%S) >> "$BASH_ENV"
  jfrog-xray-scan:
    steps:
      - run:
          name: Run Xray scan on image
          command: |
            #!/bin/bash
            set +o pipefail
            jf docker scan coverahealth.jfrog.io/development-docker/$CIRCLE_PROJECT_REPONAME:1.0.0 --format table --min-severity Critical > /tmp/$CIRCLE_PROJECT_REPONAME-scan.out || touch /tmp/$CIRCLE_PROJECT_REPONAME-scan.out
            critical_vulnerability_count=$(cat /tmp/$CIRCLE_PROJECT_REPONAME-scan.out | grep "Critical" | wc -l)
            cat /tmp/$CIRCLE_PROJECT_REPONAME-scan.out
            echo "critical vulnerability count: $critical_vulnerability_count"
            if [ $critical_vulnerability_count -gt $JFROG_CRITICAL_VULNERABILITY_THRESHOLD_COUNT ]
            then
              echo "Build failed as the number of critical vulnerabilities are more than the threshold value $JFROG_CRITICAL_VULNERABILITY_THRESHOLD_COUNT"
              exit 1
            else
              echo "Proceeding with the build as the number of critical vulnerabilities are less than the threshold value $JFROG_CRITICAL_VULNERABILITY_THRESHOLD_COUNT"
              exit 0
            fi
jobs:
  Install Test Build:
    executor: py-project-setup/default
    steps:
      - checkout
      - py-project-setup/setup_build_env:
          python_version: 3.11.7
      - python/install-packages:
          pkg-manager: poetry
          args: --without dev
          include-python-in-cache-key: false
      - run-pytest
      - sonarcloud/scan
      - build-wheel
      - set-build-timestamp
      - docker/check:
          docker-username: ARTIFACTORY_USER
          docker-password: ARTIFACTORY_API_KEY
          registry: coverahealth.jfrog.io
      - docker/build:
          dockerfile: Dockerfile
          image: development-docker/$CIRCLE_PROJECT_REPONAME
          registry: coverahealth.jfrog.io
          tag: 1.0.0,$BUILD_TS_TAG
          use-buildkit: true
          extra_build_args: '--secret id=ARTIFACTORY_USER --secret id=ARTIFACTORY_API_KEY --label git_commit_sha=$CIRCLE_SHA1'
      - jfrog-xray-scan
      - when:
          condition:
            or:
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ master, << pipeline.git.branch >> ]
              - matches:
                  pattern: ^hotfix.*
                  value: << pipeline.git.branch >>
          steps:
            - docker/push:
                registry: coverahealth.jfrog.io
                image: development-docker/$CIRCLE_PROJECT_REPONAME
                tag: 1.0.0,$BUILD_TS_TAG
            - jira/notify:
                pipeline_id: << pipeline.id >>
                pipeline_number: << pipeline.number >>
                environment: development
workflows:
  main:
    jobs:
      - Install Test Build:
          context:
            - jfrog-artifactory
            - SonarCloud
            - JIRA_WEBHOOK